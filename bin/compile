#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

### Configure environment
set -o errexit    # Always exit on error
set -o pipefail   # Don't ignore exit codes when piping output
set -o nounset    # Fail on unset variables
unset GIT_DIR     # Avoid GIT_DIR leak from previous build steps

if [ "$STACK" != "heroku-20" ] && [ "$STACK" != "heroku-24" ]; then
	echo "Need heroku-20 or heroku-24 stack"
	exit 1
fi

### Configure directories
BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)

mkdir -p $BUILD_DIR/.profile.d
cp $BP_DIR/profile/* $BUILD_DIR/.profile.d/

### Load dependencies
source $BP_DIR/lib/utils

export_env_dir "$ENV_DIR"
export NUGET_XMLDOC_MODE=${NUGET_XMLDOC_MODE:-skip}
export DOTNET_SKIP_FIRST_TIME_EXPERIENCE=${DOTNET_SKIP_FIRST_TIME_EXPERIENCE:-1}
export DOTNET_CLI_TELEMETRY_OPTOUT=${DOTNET_CLI_TELEMETRY_OPTOUT:-1}

DOTNET_SDK_VERSION=${DOTNET_SDK_VERSION:-8.0.303}
DOTNET_RUNTIME_VERSION=${DOTNET_RUNTIME_VERSION:-8.0.7}

echo "Installing dotnet"
install_dotnet $BUILD_DIR $CACHE_DIR $DOTNET_SDK_VERSION $DOTNET_RUNTIME_VERSION

export PATH="${BUILD_DIR}/.heroku/dotnet:${PATH}"

cd $BUILD_DIR

if [ -z ${PROJECT_FILE:-} ]; then
	PROJECT_FILE=$(x=$(dirname $(find ${BUILD_DIR} -maxdepth 5 -iname Startup.cs | head -1)); while [[ "$x" =~ $BUILD_DIR ]] ; do find "$x" -maxdepth 1 -name *.csproj; x=`dirname "$x"`; done)
fi

if [ -z ${PROJECT_NAME:-} ]; then
	PROJECT_NAME=$(basename ${PROJECT_FILE%.*})
fi

export NUGET_PACKAGES="${CACHE_DIR}/nuget/cache"

echo "publish ${PROJECT_FILE}"
dotnet publish $PROJECT_FILE --output ${BUILD_DIR}/heroku_output --configuration Release --runtime linux-x64

if [ ! -f ${BUILD_DIR}/Procfile ]; then
	cat << EOT >> ${BUILD_DIR}/Procfile
web: cd \$HOME/heroku_output && ./${PROJECT_NAME}
EOT
else
	topic "WARNING"
	echo "Be careful with custom Procfile" | indent
fi
